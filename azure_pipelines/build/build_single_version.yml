steps:
  # Sentinel cache: if this one hits, it means the image cache will hit too
  # We don't use the image cache for performance reasons
  - task: Cache@2
    inputs:
      key: SENTINEL=1 | $(OPENEDX_VERSION) | $(CACHE_KEY_IMAGES)
      path: $(SENTINEL_CACHE_PATH)
      cacheHitVar: "ImagesSentinelHit"
    displayName: "Docker images sentinel cache"

  - template: ../load_images.yml
    parameters:
      CONDITION: ne(variables.ImagesSentinelHit, 'true')

  - script: echo '##vso[task.setvariable variable=needs_build]true'
    condition: ne(variables.ImagesSentinelHit, 'true')
    displayName: "Set needs_build pipeline variable"

  - script: df -h; time sudo rm -rf /var/cache/apt/archives /opt/ghc; df -h
    condition: and(succeeded(), ne(variables.needs_build, 'false'))
    displayName: "Remove Haskell compiler and cached apt archives to save disk space"

  - script: |
      images=$(docker images|grep -v '<none>'|grep derex|awk '{print $1 ":" $2}')
      CACHE_FROM_OPTS=""
      if [ -d "$(IMAGE_CACHE_PATH)" ]; then
        echo "Will use cached layers from images $images"
        for image in $images; do
          CACHE_FROM_OPTS="${CACHE_FROM_OPTS} --cache-from=$image"
        done
      else
        mkdir $(IMAGE_CACHE_PATH)
      fi
      echo "##vso[task.setvariable variable=CACHE_FROM_OPTS]${CACHE_FROM_OPTS}"
      mkdir $(SENTINEL_CACHE_PATH)
      cp -r $(CACHE_KEY_FILES) $(SENTINEL_CACHE_PATH)
      # We save the sha of the repo that built this image, so that we can push
      # it only in a build of the same commit, after tests are passed
      git rev-parse --verify HEAD > $(SENTINEL_CACHE_PATH)/built_version
    condition: and(succeeded(), ne(variables.needs_build, 'false'))
    displayName: "Setup docker images cache"

  - script: |
      set -ex
      sudo apt-get remove moby-cli -y
      curl -fsSL https://get.docker.com |sudo bash
      sudo mv /etc/docker/daemon.json /etc/docker/daemon.json.orig
      sudo cat /etc/docker/daemon.json.orig|jq '. + {experimental: true}' |sudo tee /etc/docker/daemon.json
      sudo systemctl restart docker.service
      docker version
      docker buildx create --use
      docker images
    condition: and(succeeded(), ne(variables.needs_build, 'false'))
    displayName: Replace Microsoft docker with upsream docker and create build context

  - script: sudo apt-get install pixz -y
    condition: and(succeeded(), ne(variables.needs_build, 'false'))
    displayName: Install pixz

  - template: ../setup.yml
    parameters:
      CONDITION: and(succeeded(), ne(variables.needs_build, 'false'))

  - script: derex build forum --docker-opts "--cache-to=type=inline -o type=docker" $(OPENEDX_VERSION)
    condition: and(succeeded(), ne(variables.needs_build, 'false'))
    displayName: Build docker image

  - script: |
      set -euxo pipefail;
      docker save \
        $(derex build forum --only-print-image-name $(OPENEDX_VERSION)) \
        $(derex build forum --only-print-image-name $(OPENEDX_VERSION)) \
        | pixz -0 > $(IMAGE_CACHE_PATH)/forum-$(OPENEDX_VERSION).tar.xz
    condition: and(succeeded(), and(ne(variables.needs_build, 'false'), eq(variables.JOB_VARIANT, 'Pinned')))
    displayName: Save images
