name: build
on: [push]
env:
  CACHE_VERSION: 1
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        PYTHON_VERSION: [3.6, 3.7, 3.8]
        OPENEDX_VERSION: ["ironwood", "juniper", "koa"]
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.PYTHON_VERSION }}

      - name: Setup pip cache
        id: pip-cache
        uses: actions/cache@v2
        with:
          # This path is specific to Ubuntu
          path: "${{ github.workspace }}/.cache/pip"
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ env.CACHE_VERSION }}-${{ matrix.PYTHON_VERSION }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: ${{ env.CACHE_VERSION }}-${{ matrix.PYTHON_VERSION }}-pip-

      - name: Setup docker build cache
        id: docker-cache
        uses: actions/cache@v2
        with:
          path: "${{ github.workspace }}/.cache/docker"
          key: ${{ env.CACHE_VERSION }}-${{ matrix.OPENEDX_VERSION }}-docker-${{ hashFiles('docker_build/**') }}
          restore-keys: ${{ env.CACHE_VERSION }}-${{ matrix.OPENEDX_VERSION }}-docker-

      - name: Setup docker images cache
        id: docker-images-cache
        uses: actions/cache@v2
        with:
          path: "${{ github.workspace }}/.cache/docker_images"
          key: ${{ env.CACHE_VERSION }}-${{ matrix.OPENEDX_VERSION }}-docker-images
          restore-keys: ${{ env.CACHE_VERSION }}-${{ matrix.OPENEDX_VERSION }}-docker-images

      - uses: ./.github/actions/setup
        with:
          DEVELOPMENT_MODE: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: derexop
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build
        run: |
          set -x
          export DOCKER_BUILDKIT=1
          export DOCKER_IMAGE_FILENAME=$(derex build forum ${{ matrix.OPENEDX_VERSION }} --only-print-image-name | tr -s '/:' '-')
          export DOCKER_OPTS="--output type=tar,dest=${{ github.workspace }}/.cache/docker_images/${{ matrix.PYTHON_VERSION }}-$DOCKER_IMAGE_FILENAME.tar --cache-from type=local,src=${{ github.workspace }}/.cache/docker --cache-to=type=local,dest=${{ github.workspace }}/.cache/docker"

          # Create the docker images cache directory if it doesn't exists
          if [ ! -d "${{ github.workspace }}/.cache/docker_images/" ]; then
            mkdir -p ${{ github.workspace }}/.cache/docker_images/
          fi

          derex build forum ${{ matrix.OPENEDX_VERSION }} --docker-opts "$DOCKER_OPTS"
          echo "Docker images cache"
          ls -la ${{ github.workspace }}/.cache/docker_images
          echo "Docker build cache"
          ls -la ${{ github.workspace }}/.cache/docker

  test:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        PYTHON_VERSION: [3.6, 3.7, 3.8]
        OPENEDX_VERSION: ["ironwood", "juniper", "koa"]
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2

      - name: Setup pip cache
        id: pip-cache
        uses: actions/cache@v2
        with:
          # This path is specific to Ubuntu
          path: "${{ github.workspace }}/.cache/pip"
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ env.CACHE_VERSION }}-${{ matrix.PYTHON_VERSION }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: ${{ env.CACHE_VERSION }}-${{ matrix.PYTHON_VERSION }}-pip-

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.PYTHON_VERSION }}

      - name: Setup docker images cache
        id: docker-images-cache
        uses: actions/cache@v2
        with:
          path: "${{ github.workspace }}/.cache/docker_images"
          key: ${{ env.CACHE_VERSION }}-${{ matrix.OPENEDX_VERSION }}-docker-images
          restore-keys: ${{ env.CACHE_VERSION }}-${{ matrix.OPENEDX_VERSION }}-docker-images

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - uses: ./.github/actions/setup

      - name: Load docker image cache
        run: |
          set -x
          echo "Docker images cache"
          ls -la ${{ github.workspace }}/.cache/docker_images

          export DOCKER_IMAGE_FILENAME=$(derex build forum ${{ matrix.OPENEDX_VERSION }} --only-print-image-name | tr -s '/:' '-')
          docker load -i ${{ github.workspace }}/.cache/docker_images/${{ matrix.PYTHON_VERSION }}-$DOCKER_IMAGE_FILENAME.tar
          docker images -a
